/* eslint-disable @typescript-eslint/no-explicit-any */
import jsPDF from "jspdf"
import autoTable from "jspdf-autotable"
import { format } from "date-fns"
import axios from "axios"
import { getAuthHeaders } from "../services/authService"
import QRCode from "qrcode"
import Chart from "chart.js/auto"

export const generateDashboardReport = async (user: any) => {
  const doc = new jsPDF()

  const addWatermark = () => {
    doc.setTextColor(200)
    doc.setFontSize(40)
    doc.text("TenaHub.co.ke", 35, 150, { angle: 45 })
    doc.setTextColor(0)
    doc.setFontSize(10)
  }

  const addFooter = () => {
    doc.setFontSize(8)
    doc.setTextColor(120)
    doc.text("Generated by TenaHub - We are happy to have You with Us.", 14, 285)
    doc.setTextColor(0)
  }

  const addNewPageWithExtras = () => {
    doc.addPage()
    addWatermark()
    addFooter()
  }

  const loadImage = (url: string): Promise<string> => {
    return new Promise((resolve, reject) => {
      const img = new Image()
      img.crossOrigin = "Anonymous"
      img.onload = () => {
        const canvas = document.createElement("canvas")
        canvas.width = img.width
        canvas.height = img.height
        const ctx = canvas.getContext("2d")
        if (ctx) {
          ctx.drawImage(img, 0, 0)
          resolve(canvas.toDataURL("image/png"))
        } else {
          reject("Unable to get canvas context")
        }
      }
      img.onerror = reject
      img.src = url
    })
  }

  const generateQRCode = async (text: string): Promise<string> => {
    return await QRCode.toDataURL(text)
  }

  const createChartImage = async (config: any): Promise<string> => {
    return new Promise((resolve) => {
      const canvas = document.createElement("canvas")
      canvas.width = 600
      canvas.height = 300
      document.body.appendChild(canvas)

      const chart = new Chart(canvas, config)

      setTimeout(() => {
        const dataURL = canvas.toDataURL("image/png")
        chart.destroy()
        canvas.remove()
        resolve(dataURL)
      }, 800)
    })
  }

  try {
    const logoDataUrl = await loadImage("../public/logo.png")
    const qrData = `Name: ${user.name}\nEmail: ${user.email}\nPhone: ${user.phone}`
    const qrCodeDataUrl = await generateQRCode(qrData)

    doc.addImage(logoDataUrl, "PNG", 10, 10, 30, 20)
    doc.setFontSize(20)
    doc.setTextColor("#000")
    doc.setFont("helvetica", "bold")
    doc.text("TenaHub", doc.internal.pageSize.getWidth() / 2, 20, { align: "center" })
    doc.addImage(qrCodeDataUrl, "PNG", doc.internal.pageSize.getWidth() - 40, 10, 30, 30)

    const headerStartY = 40
    doc.setFontSize(16)
    doc.setTextColor("#007bff")
    doc.setFont("helvetica", "normal")
    doc.text("PROPERTY REPORT FOR", 14, headerStartY)

    doc.setFontSize(12)
    doc.text(`${user.name} (${user.role})`, 14, headerStartY + 5)
    doc.text(`Email: ${user.email}`, 14, headerStartY + 10)

    doc.setFontSize(10)
    doc.text(`Generated: ${format(new Date(), "PPPpp")}`, 14, headerStartY + 15)

    addFooter()

    const authHeaders = { headers: getAuthHeaders() }
    const statsRes = await axios.get("https://nyumba-smart-server.onrender.com/api/landlord/financeStats", authHeaders)
    const { financialStats, propertyStats } = statsRes.data
    const revenueRes = await axios.get("https://nyumba-smart-server.onrender.com/api/payment/landlord/revenue", authHeaders)
    const { payments } = revenueRes.data

    autoTable(doc, {
      startY: headerStartY + 25,
      head: [["Metric", "Value"]],
      body: [
        ["Total Properties", propertyStats.totalProperties],
        ["Total Rooms", propertyStats.totalRooms],
        ["Occupied Rooms", propertyStats.occupiedRooms],
        ["Vacant Rooms", propertyStats.vacantRooms],
        ["Maintenance Rooms", propertyStats.maintenanceRooms],
        ["Occupancy Rate", `${propertyStats.occupancyRate}%`],
      ],
      styles: {
        fontSize: 10,
        textColor: 0, // Black body text
        fontStyle: "normal",
      },
      headStyles: {
        fillColor: [0, 123, 255],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
    })

    let currentY = doc.lastAutoTable?.finalY ?? 60

    autoTable(doc, {
      startY: currentY + 10,
      head: [["Financial Metric", "Amount"]],
      body: [
        ["Total Revenue", `KES ${financialStats.totalRevenue.toLocaleString()}`],
        ["Paid Rent", `KES ${financialStats.paidRent.toLocaleString()}`],
        ["Pending Rent", `KES ${financialStats.pendingRent.toLocaleString()}`],
      ],
      styles: {
        fontSize: 10,
         textColor: 0, // Black body text
        fontStyle: "normal",
      },
      headStyles: {
        fillColor: [0, 123, 255],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
    })

    currentY = doc.lastAutoTable?.finalY ?? currentY + 30

    const paymentsByMonth: { [month: string]: any[] } = {}
    const monthlyTotals: { [month: string]: number } = {}
    let overallTotal = 0

    payments.forEach((p: any) => {
      const date = new Date(p.timestamp)
      const monthKey = format(date, "MMMM yyyy")
      if (!paymentsByMonth[monthKey]) paymentsByMonth[monthKey] = []
      paymentsByMonth[monthKey].push(p)
      monthlyTotals[monthKey] = (monthlyTotals[monthKey] || 0) + p.amount
      overallTotal += p.amount
    })

    const sortedMonths = Object.keys(paymentsByMonth).sort(
      (a, b) => new Date(a).getTime() - new Date(b).getTime()
    )

    for (const month of sortedMonths) {
      const monthPayments = paymentsByMonth[month]
      addNewPageWithExtras()
      doc.setFontSize(14)
      doc.setTextColor("#007bff")
      doc.text(`Payments - ${month}`, 14, 20)

      autoTable(doc, {
        startY: 30,
        head: [["Date", "Tenant ID", "Property", "Room", "Method", "Amount", "Status"]],
        body: monthPayments.map((p) => [
          new Date(p.timestamp).toLocaleDateString(),
          p.tenant?.user_id || "N/A",
          p.property?.name || "N/A",
          `${p.room?.room_number} (${p.room?.type})`,
          p.method,
          `KES ${p.amount.toLocaleString()}`,
          p.status,
        ]),
        styles: {
          fontSize: 9,
          textColor: 0, // Black body text
          fontStyle: "normal",
        },
        headStyles: {
          fillColor: [0, 123, 255],
          textColor: [255, 255, 255],
          fontStyle: "bold",
        },
      })

      addFooter()
    }

    addNewPageWithExtras()
    doc.setFontSize(14)
    doc.setTextColor("#007bff")
    doc.text("Payments Summary", 14, 20)

    autoTable(doc, {
      startY: 30,
      head: [["Month", "Total Revenue (KES)"]],
      body: sortedMonths.map((month) => [month, monthlyTotals[month].toLocaleString()]),
      styles: {
        fontSize: 10,
        textColor: 0,
        fontStyle: "normal",
      },
      headStyles: {
        fillColor: [0, 123, 255],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      foot: [["Grand Total", `KES ${overallTotal.toLocaleString()}`]],
      footStyles: {
        fillColor: [220, 220, 220],
        fontStyle: "bold",
      },
    })

    addFooter()

    // --- Charts Section ---


    // --- NEW: Add Charts Section ---
const chartConfigs = [
  {
    type: "bar",
    data: {
      labels: sortedMonths,
      datasets: [
        {
          label: "Monthly Revenue",
          data: sortedMonths.map((m) => monthlyTotals[m]),
          backgroundColor: "#007bff", // Blue
        },
      ],
    },
    options: {
      plugins: {
        title: {
          display: true,
          text: "Monthly Revenue",
          font: { size: 16 },
        },
        legend: {
          display: true,
          position: "bottom",
          labels: { font: { size: 10 } },
        },
      },
      scales: {
        x: { ticks: { font: { size: 10 } } },
        y: { ticks: { font: { size: 10 } } },
      },
    },
  },
  {
    type: "pie",
    data: {
      labels: ["Paid Rent", "Pending Rent"],
      datasets: [
        {
          data: [financialStats.paidRent, financialStats.pendingRent],
          backgroundColor: ["#28a745", "#dc3545"], // Green, Red
        },
      ],
    },
    options: {
      plugins: {
        title: {
          display: true,
          text: "Rent Payment Status",
          font: { size: 16 },
        },
        legend: {
          display: true,
          position: "bottom",
          labels: { font: { size: 10 } },
        },
      },
    },
  },
  {
    type: "doughnut",
    data: {
      labels: ["Occupied", "Vacant", "Maintenance"],
      datasets: [
        {
          data: [
            propertyStats.occupiedRooms,
            propertyStats.vacantRooms,
            propertyStats.maintenanceRooms,
          ],
          backgroundColor: ["#17a2b8", "#ffc107", "#dc3545"], // Cyan, Yellow, Red
        },
      ],
    },
    options: {
      plugins: {
        title: {
          display: true,
          text: "Room Occupancy Status",
          font: { size: 16 },
        },
        legend: {
          display: true,
          position: "bottom",
          labels: { font: { size: 10 } },
        },
      },
    },
  },
  {
    type: "bar",
    data: {
      labels: ["Total Props", "Rooms", "Occupied", "Vacant"],
      datasets: [
        {
          label: "Property Stats",
          data: [
            propertyStats.totalProperties,
            propertyStats.totalRooms,
            propertyStats.occupiedRooms,
            propertyStats.vacantRooms,
          ],
          backgroundColor: "#6610f2", // Purple
        },
      ],
    },
    options: {
      plugins: {
        title: {
          display: true,
          text: "Property Overview",
          font: { size: 16 },
        },
        legend: {
          display: true,
          position: "bottom",
          labels: { font: { size: 10 } },
        },
      },
      scales: {
        x: { ticks: { font: { size: 10 } } },
        y: { ticks: { font: { size: 10 } } },
      },
    },
  },
]


for (const chartConfig of chartConfigs) {
  const chartImage = await createChartImage(chartConfig)
  addNewPageWithExtras()
  doc.addImage(chartImage, "PNG", 10, 40, 180, 90)
}

doc.save("property_report.pdf")

    // Save PDF
    doc.save("property_report.pdf")
  } catch (error) {
    console.error("Failed to generate dashboard report:", error)
    alert("Error generating report. See console for details.")
  }
}
